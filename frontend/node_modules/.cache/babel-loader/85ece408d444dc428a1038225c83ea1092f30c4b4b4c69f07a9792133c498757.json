{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport InstagramSidebar from './components/InstagramSidebar';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n_c = AppContainer;\nconst AppBox = styled.div`\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n_c2 = AppBox;\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\n_c3 = ChatSection;\nconst App = () => {\n  _s();\n  // 로그인 하면 myid 받기\n  const currentUserid = 6;\n  // setCurrentUserId(6);\n  const [chats, setChats] = useState([]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n\n  // const [chats, setChats] = useState([\n  //   { id: 1, name: 'John Doe', messages: [], \"createdat\":createdat },\n  //   { id: 2, name: 'Jane Smith', messages: [], \"createdat\":createdat },\n  //   { id: 3, name: 'John', messages: [], \"createdat\":createdat },\n  //   { id: 4, name: 'Minji', messages: [], \"createdat\":createdat },\n  // ]);\n\n  useEffect(() => {\n    fetchChats(); // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  }, [currentUserid]); // currentUserid가 변경될 때마다 useEffect 호출\n\n  useEffect(() => {\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n    chatSocket.onmessage = function (e) {\n      const data = JSON.parse(e.data);\n      const {\n        sender,\n        receiver,\n        message\n      } = data;\n\n      // 새로운 메시지를 상태에 추가\n      const newMessage = {\n        text: message.text,\n        send: false,\n        sent_at: message.timestamp\n      };\n      setChats(prevMessages => [...prevMessages, newMessage]);\n\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\n        params: {\n          select: 3,\n          dm: message.text,\n          me: receiver,\n          you: sender\n        }\n      }).then(response => {\n        console.log('Message saved successfully:', response.data);\n        fetchChats();\n        // 필요하다면 추가적인 로직 수행\n      }).catch(error => {\n        console.error('Error saving message:', error);\n      });\n    };\n\n    // 컴포넌트 언마운트 시 소켓 연결 해제\n    return () => {\n      chatSocket.close();\n    };\n  }, []);\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  const fetchChats = () => {\n    axios.get('http://127.0.0.1:8000/dm.do', {\n      params: {\n        curId: currentUserid,\n        select: 1\n      }\n    }).then(response => {\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\n      setChats(sortedChats);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  };\n  const sendMessage = message => {\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n    axios.get(\"http://127.0.0.1:8000/dm.do\", {\n      params: {\n        select: 2,\n        dm: message.text,\n        me: currentUserid,\n        you: selectedChatId\n      }\n    }).then(response => {\n      // 메시지 전송 후 채팅 목록을 다시 가져옴\n      fetchChats();\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n\n  // const receiveMessage = () => {\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n\n  //   chatSocket.onmessage = function (e) {\n  //     const data = JSON.parse(e.data);\n  //     // 받은 메시지 처리 로직 (예시: 채팅 목록을 다시 가져오는 것처럼)\n  //     const { sender, receiver, message } = data;\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\n  //       params: {\n  //         select: 3,\n  //         dm: message.text,\n  //         me: receiver,\n  //         you: sender,\n  //       },\n  //     }).then((response) => {\n  //       // 메시지 전송 후 채팅 목록을 다시 가져옴\n  //       fetchChats();\n  //     }).catch(error => {\n  //       console.error('Error sending message:', error);\n  //     });\n  //   };\n\n  //   chatSocket.onclose = function (e) {\n  //     console.error('Chat socket closed unexpectedly');\n  //   };\n\n  //   return () => {\n  //     chatSocket.close();\n  //   };\n\n  // };\n\n  const selectChat = id => {\n    //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(AppBox, {\n      children: [/*#__PURE__*/_jsxDEV(ChatList, {\n        chats: chats,\n        selectChat: selectChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n        children: selectedChat && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: selectedChat.messages,\n            selectedChatId: selectedChatId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            sendMessage: sendMessage,\n            curUserid: currentUserid,\n            receiv_id: selectedChatId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"E5q0PKIch0rpyU/5GfhcfaCeDkY=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"AppBox\");\n$RefreshReg$(_c3, \"ChatSection\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatWindow","MessageInput","ChatList","InstagramSidebar","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","_c","AppBox","_c2","ChatSection","_c3","App","_s","currentUserid","chats","setChats","selectedChatId","setSelectedChatId","fetchChats","chatSocket","WebSocket","window","location","host","onmessage","e","data","JSON","parse","sender","receiver","message","newMessage","text","send","sent_at","timestamp","prevMessages","get","params","select","dm","me","you","then","response","console","log","catch","error","close","curId","sortedChats","sort","a","b","Date","createdat","sendMessage","selectChat","id","selectedChat","find","chat","children","fileName","_jsxFileName","lineNumber","columnNumber","messages","curUserid","receiv_id","_c4","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport InstagramSidebar from './components/InstagramSidebar';\nimport axios from \"axios\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n\nconst AppBox = styled.div`\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\nconst App = () => {\n  // 로그인 하면 myid 받기\n  const currentUserid = 6\n  // setCurrentUserId(6);\n  const [chats, setChats] = useState([]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n \n  // const [chats, setChats] = useState([\n  //   { id: 1, name: 'John Doe', messages: [], \"createdat\":createdat },\n  //   { id: 2, name: 'Jane Smith', messages: [], \"createdat\":createdat },\n  //   { id: 3, name: 'John', messages: [], \"createdat\":createdat },\n  //   { id: 4, name: 'Minji', messages: [], \"createdat\":createdat },\n  // ]);\n\n  useEffect(() => {\n    fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\n\n  useEffect(() => {\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n\n    chatSocket.onmessage = function (e) {\n      const data = JSON.parse(e.data);\n      const { sender, receiver, message } = data;\n\n      // 새로운 메시지를 상태에 추가\n      const newMessage = {\n        text: message.text,\n        send: false,\n        sent_at: message.timestamp,\n      };\n      setChats(prevMessages => [...prevMessages, newMessage]);\n\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\n        params: {\n          select: 3,\n          dm: message.text,\n          me: receiver,\n          you: sender,\n        },\n      }).then((response) => {\n        console.log('Message saved successfully:', response.data);\n        fetchChats(); \n        // 필요하다면 추가적인 로직 수행\n      }).catch(error => {\n        console.error('Error saving message:', error);\n      });\n    };\n\n    // 컴포넌트 언마운트 시 소켓 연결 해제\n    return () => {\n      chatSocket.close();\n    };\n  }, []);\n\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  const fetchChats = () => {\n    axios.get('http://127.0.0.1:8000/dm.do', {\n      params: {\n        curId: currentUserid,\n        select: 1,\n      }\n    }).then(response => {\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\n      setChats(sortedChats);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  };\n\n\n  const sendMessage = (message) => {\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n    axios.get(\"http://127.0.0.1:8000/dm.do\", {\n      params: {\n        select: 2,\n        dm: message.text,\n        me: currentUserid,\n        you: selectedChatId,\n      },\n    }).then((response) => {\n      // 메시지 전송 후 채팅 목록을 다시 가져옴\n      fetchChats();\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n\n  // const receiveMessage = () => {\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n\n  //   chatSocket.onmessage = function (e) {\n  //     const data = JSON.parse(e.data);\n  //     // 받은 메시지 처리 로직 (예시: 채팅 목록을 다시 가져오는 것처럼)\n  //     const { sender, receiver, message } = data;\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\n  //       params: {\n  //         select: 3,\n  //         dm: message.text,\n  //         me: receiver,\n  //         you: sender,\n  //       },\n  //     }).then((response) => {\n  //       // 메시지 전송 후 채팅 목록을 다시 가져옴\n  //       fetchChats();\n  //     }).catch(error => {\n  //       console.error('Error sending message:', error);\n  //     });\n  //   };\n\n  //   chatSocket.onclose = function (e) {\n  //     console.error('Chat socket closed unexpectedly');\n  //   };\n\n  //   return () => {\n  //     chatSocket.close();\n  //   };\n\n  // };\n\n  const selectChat = (id) => { //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n\n\n\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n\n  return (\n    <AppContainer>\n      <AppBox>\n        <ChatList chats={chats} selectChat={selectChat} />\n        <ChatSection>\n          {selectedChat && (\n            <>\n              <ChatWindow messages={selectedChat.messages} selectedChatId={selectedChatId} />\n              <MessageInput sendMessage={sendMessage}\n                curUserid={currentUserid}\n                receiv_id={selectedChatId} />\n            </>\n          )}\n        </ChatSection>\n      </AppBox>\n    </AppContainer>\n    \n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Down\\\\react-app\\\\lecture2\\\\dm\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n_c = AppContainer;\nconst AppBox = styled.div`\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n_c2 = AppBox;\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n_c3 = ChatSection;\nconst BackButton = styled.button`\n  align-self: flex-start;\n  margin-top: 10px;\n  margin-left: 10px;\n  padding: 5px 10px;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\n_c4 = BackButton;\nconst App = () => {\n  _s();\n  // 로그인 하면 myid 받기\n  const currentUserid = 6;\n  // setCurrentUserId(6);\n  // const [chats, setChats] = useState([]);\n\n  // useEffect(() => {\n  //   fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  // }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\n\n  const fetchChats = () => {\n    axios.get('http://127.0.0.1:8000/', {\n      params: {\n        curId: currentUserid,\n        select: 1\n      }\n    }).then(response => {\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\n      setChats(sortedChats);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  };\n  const [chats, setChats] = useState([{\n    id: 1,\n    name: 'John Doe',\n    messages: []\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    messages: []\n  }, {\n    id: 3,\n    name: 'John',\n    messages: []\n  }, {\n    id: 4,\n    name: 'Minji',\n    messages: []\n  }]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const addMessage = message => {\n    setChats(chats.map(chat => {\n      if (chat.id === selectedChatId) {\n        return {\n          ...chat,\n          messages: [...chat.messages, message]\n        };\n      }\n      return chat;\n    }));\n  };\n\n  // const addMessage = (message) => {\n  //   // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n  //   axios.get(\"http://127.0.0.1:8000\", {\n  //     params: {\n  //       select: 2,\n  //       dm: message.text,\n  //       me: currentUserid,\n  //       you: selectedChatId,\n  //     },\n  //   }).then((response) => {\n  //     // 메시지 전송 후 채팅 목록을 다시 가져옴\n  //     fetchChats();\n  //   }).catch(error => {\n  //     console.error('Error sending message:', error);\n  //   });\n  // };\n\n  const selectChat = id => {\n    //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n  const handleBackButtonClick = () => {\n    setSelectedChatId(null); // 선택된 채팅 초기화\n  };\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {\n      onClick: handleBackButtonClick,\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBox, {\n      children: [/*#__PURE__*/_jsxDEV(ChatList, {\n        chats: chats,\n        selectChat: selectChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n        children: selectedChat && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: selectedChat.messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            addMessage: addMessage,\n            curUserid: currentUserid,\n            receiv_id: selectedChatId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ab6bGLqzefwz7TYhKQb3PpblYec=\");\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"AppBox\");\n$RefreshReg$(_c3, \"ChatSection\");\n$RefreshReg$(_c4, \"BackButton\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatWindow","MessageInput","ChatList","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","_c","AppBox","_c2","ChatSection","_c3","BackButton","button","_c4","App","_s","currentUserid","fetchChats","get","params","curId","select","then","response","sortedChats","data","sort","a","b","Date","createdat","setChats","catch","error","console","chats","id","name","messages","selectedChatId","setSelectedChatId","addMessage","message","map","chat","selectChat","handleBackButtonClick","selectedChat","find","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","curUserid","receiv_id","_c5","$RefreshReg$"],"sources":["D:/Down/react-app/lecture2/dm/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport ChatWindow from './components//ChatWindow';\r\nimport MessageInput from './components/MessageInput';\r\nimport ChatList from './components/ChatList';\r\nimport axios from \"axios\";\r\nconst AppContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #fafafa;\r\n`;\r\n\r\nconst AppBox = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 10px;\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 2;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  align-self: flex-start;\r\n  margin-top: 10px;\r\n  margin-left: 10px;\r\n  padding: 5px 10px;\r\n  background-color: #f0f0f0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n// function a(myId) {\r\n\r\n//   axios\r\n//     .get(\"http://127.0.0.1:8000\", {\r\n//       params: {\r\n//         select: 1,\r\n//         myid: myId,\r\n//       },\r\n//     })\r\n//     .then((response) => {\r\n//       return response.data;\r\n//     }).catch(error => {\r\n//       console.error('Error fetching chats:', error);\r\n//     });\r\n// }\r\nconst App = () => {\r\n  // 로그인 하면 myid 받기\r\n  const currentUserid = 6\r\n  // setCurrentUserId(6);\r\n  // const [chats, setChats] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\r\n  // }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\r\n\r\n  const fetchChats = () => {\r\n    axios.get('http://127.0.0.1:8000/', {\r\n      params: {\r\n        curId: currentUserid,\r\n        select: 1,\r\n      }\r\n    }).then(response => {\r\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\r\n      setChats(sortedChats);\r\n    }).catch(error => {\r\n      console.error('Error fetching chats:', error);\r\n    });\r\n  };\r\n  const [chats, setChats] = useState([\r\n    { id: 1, name: 'John Doe', messages: []},\r\n    { id: 2, name: 'Jane Smith', messages: []},\r\n    { id: 3, name: 'John', messages: []},\r\n    { id: 4, name: 'Minji', messages: [] },\r\n  ]);\r\n\r\n\r\n\r\n  const [selectedChatId, setSelectedChatId] = useState(null);\r\n\r\n  const addMessage = (message) => {\r\n    setChats(chats.map(chat => {\r\n      if (chat.id === selectedChatId) {\r\n        return { ...chat, messages: [...chat.messages, message] };\r\n      }\r\n      return chat;\r\n    }));\r\n  };\r\n\r\n  // const addMessage = (message) => {\r\n  //   // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\r\n  //   axios.get(\"http://127.0.0.1:8000\", {\r\n  //     params: {\r\n  //       select: 2,\r\n  //       dm: message.text,\r\n  //       me: currentUserid,\r\n  //       you: selectedChatId,\r\n  //     },\r\n  //   }).then((response) => {\r\n  //     // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n  //     fetchChats();\r\n  //   }).catch(error => {\r\n  //     console.error('Error sending message:', error);\r\n  //   });\r\n  // };\r\n\r\n  const selectChat = (id) => { //  'id': partner_id,\r\n    setSelectedChatId(id);\r\n  };\r\n\r\n  const handleBackButtonClick = () => {\r\n    setSelectedChatId(null); // 선택된 채팅 초기화\r\n  };\r\n\r\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\r\n\r\n  return (\r\n    <AppContainer>\r\n      <BackButton onClick={handleBackButtonClick}>←</BackButton>\r\n      <AppBox>\r\n        <ChatList chats={chats} selectChat={selectChat} />\r\n        <ChatSection>\r\n          {selectedChat && (\r\n            <>\r\n              <ChatWindow messages={selectedChat.messages} />\r\n              <MessageInput addMessage={addMessage}\r\n                curUserid={currentUserid}\r\n                receiv_id={selectedChatId} />\r\n            </>\r\n          )}\r\n        </ChatSection>\r\n      </AppBox>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAC1B,MAAMC,YAAY,GAAGT,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,YAAY;AAQlB,MAAMG,MAAM,GAAGZ,MAAM,CAACU,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GARID,MAAM;AAUZ,MAAME,WAAW,GAAGd,MAAM,CAACU,GAAG;AAC9B;AACA;AACA;AACA,CAAC;AAACK,GAAA,GAJID,WAAW;AAMjB,MAAME,UAAU,GAAGhB,MAAM,CAACiB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,GAAA,GAxBMF,UAAU;AAyBhB,MAAMG,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAMC,aAAa,GAAG,CAAC;EACvB;EACA;;EAEA;EACA;EACA;;EAEA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBlB,KAAK,CAACmB,GAAG,CAAC,wBAAwB,EAAE;MAClCC,MAAM,EAAE;QACNC,KAAK,EAAEJ,aAAa;QACpBK,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;MAClB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC;MAC/FC,QAAQ,CAACP,WAAW,CAAC;IACvB,CAAC,CAAC,CAACQ,KAAK,CAACC,KAAK,IAAI;MAChBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EACD,MAAM,CAACE,KAAK,EAAEJ,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,CACjC;IAAE2C,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,UAAU;IAAEC,QAAQ,EAAE;EAAE,CAAC,EACxC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,YAAY;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAC1C;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,MAAM;IAAEC,QAAQ,EAAE;EAAE,CAAC,EACpC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,QAAQ,EAAE;EAAG,CAAC,CACvC,CAAC;EAIF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMgD,UAAU,GAAIC,OAAO,IAAK;IAC9BX,QAAQ,CAACI,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAI;MACzB,IAAIA,IAAI,CAACR,EAAE,KAAKG,cAAc,EAAE;QAC9B,OAAO;UAAE,GAAGK,IAAI;UAAEN,QAAQ,EAAE,CAAC,GAAGM,IAAI,CAACN,QAAQ,EAAEI,OAAO;QAAE,CAAC;MAC3D;MACA,OAAOE,IAAI;IACb,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,UAAU,GAAIT,EAAE,IAAK;IAAE;IAC3BI,iBAAiB,CAACJ,EAAE,CAAC;EACvB,CAAC;EAED,MAAMU,qBAAqB,GAAGA,CAAA,KAAM;IAClCN,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMO,YAAY,GAAGZ,KAAK,CAACa,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKG,cAAc,CAAC;EAEnE,oBACEtC,OAAA,CAACG,YAAY;IAAA6C,QAAA,gBACXhD,OAAA,CAACU,UAAU;MAACuC,OAAO,EAAEJ,qBAAsB;MAAAG,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAC1DrD,OAAA,CAACM,MAAM;MAAA0C,QAAA,gBACLhD,OAAA,CAACH,QAAQ;QAACqC,KAAK,EAAEA,KAAM;QAACU,UAAU,EAAEA;MAAW;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClDrD,OAAA,CAACQ,WAAW;QAAAwC,QAAA,EACTF,YAAY,iBACX9C,OAAA,CAAAE,SAAA;UAAA8C,QAAA,gBACEhD,OAAA,CAACL,UAAU;YAAC0C,QAAQ,EAAES,YAAY,CAACT;UAAS;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC/CrD,OAAA,CAACJ,YAAY;YAAC4C,UAAU,EAAEA,UAAW;YACnCc,SAAS,EAAEvC,aAAc;YACzBwC,SAAS,EAAEjB;UAAe;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,eAC/B;MACH;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACU,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEnB,CAAC;AAACvC,EAAA,CAxFID,GAAG;AAAA2C,GAAA,GAAH3C,GAAG;AA0FT,eAAeA,GAAG;AAAC,IAAAR,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAA4C,GAAA;AAAAC,YAAA,CAAApD,EAAA;AAAAoD,YAAA,CAAAlD,GAAA;AAAAkD,YAAA,CAAAhD,GAAA;AAAAgD,YAAA,CAAA7C,GAAA;AAAA6C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
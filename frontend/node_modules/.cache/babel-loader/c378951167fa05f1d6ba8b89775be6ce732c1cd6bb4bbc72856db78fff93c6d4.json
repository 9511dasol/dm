{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Homepage from \"./Homepage\";\nimport Timeline from \"./timeline/Timeline\"; // 새롭게 추가할 컴포넌트\nimport DirectMessages from \"./DM/DirectMessages\";\nimport \"./App.css\";\n\n// import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // 로그인 하면 myid 받기\n  const currentUserid = 6;\n  // setCurrentUserId(6);\n  // const [chats, setChats] = useState([]);\n\n  // useEffect(() => {\n  //   fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  // }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\n\n  useEffect(() => {\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n    chatSocket.onmessage = function (e) {\n      const data = JSON.parse(e.data);\n      const {\n        sender,\n        receiver,\n        message\n      } = data;\n\n      // 새로운 메시지를 상태에 추가\n      const newMessage = {\n        text: message.text,\n        send: false,\n        sent_at: message.timestamp\n      };\n      setChats(prevMessages => [...prevMessages, newMessage]);\n\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\n        params: {\n          select: 3,\n          dm: message.text,\n          me: receiver,\n          you: sender\n        }\n      }).then(response => {\n        console.log('Message saved successfully:', response.data);\n        fetchChats();\n        // 필요하다면 추가적인 로직 수행\n      }).catch(error => {\n        console.error('Error saving message:', error);\n      });\n    };\n\n    // 컴포넌트 언마운트 시 소켓 연결 해제\n    return () => {\n      chatSocket.close();\n    };\n  }, []);\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  const fetchChats = () => {\n    axios.get('http://127.0.0.1:8000/dm.do', {\n      params: {\n        curId: currentUserid,\n        select: 1\n      }\n    }).then(response => {\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\n      setChats(sortedChats);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  };\n  const [chats, setChats] = useState([{\n    id: 1,\n    name: 'John Doe',\n    messages: []\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    messages: []\n  }, {\n    id: 3,\n    name: 'John',\n    messages: []\n  }, {\n    id: 4,\n    name: 'Minji',\n    messages: []\n  }]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const addMessage = message => {\n    setChats(chats.map(chat => {\n      if (chat.id === selectedChatId) {\n        return {\n          ...chat,\n          messages: [...chat.messages, message]\n        };\n      }\n      return chat;\n    }));\n  };\n\n  // const addMessage = (message) => {\n  //   // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n  //   axios.get(\"http://127.0.0.1:8000\", {\n  //     params: {\n  //       select: 2,\n  //       dm: message.text,\n  //       me: currentUserid,\n  //       you: selectedChatId,\n  //     },\n  //   }).then((response) => {\n  //     // 메시지 전송 후 채팅 목록을 다시 가져옴\n  //     fetchChats();\n  //   }).catch(error => {\n  //     console.error('Error sending message:', error);\n  //   });\n  // };\n\n  const selectChat = id => {\n    //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(AppBox, {\n      children: [/*#__PURE__*/_jsxDEV(ChatList, {\n        chats: chats,\n        selectChat: selectChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n        children: selectedChat && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: selectedChat.messages,\n            selectedChatId: selectedChatId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            sendMessage: addMessage,\n            curUserid: currentUserid,\n            receiv_id: selectedChatId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OucudXFQNlMx0kbGtiopmPqKL4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Homepage","Timeline","DirectMessages","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentUserid","useEffect","chatSocket","WebSocket","window","location","host","selectedChatId","onmessage","e","data","JSON","parse","sender","receiver","message","newMessage","text","send","sent_at","timestamp","setChats","prevMessages","axios","get","params","select","dm","me","you","then","response","console","log","fetchChats","catch","error","close","curId","sortedChats","sort","a","b","Date","createdat","chats","useState","id","name","messages","setSelectedChatId","addMessage","map","chat","selectChat","selectedChat","find","AppContainer","children","AppBox","ChatList","fileName","_jsxFileName","lineNumber","columnNumber","ChatSection","ChatWindow","MessageInput","sendMessage","curUserid","receiv_id","_c","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport Homepage from \"./Homepage\";\r\nimport Timeline from \"./timeline/Timeline\"; // 새롭게 추가할 컴포넌트\r\nimport DirectMessages from \"./DM/DirectMessages\"\r\nimport \"./App.css\";\r\n\r\n// import { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nconst App = () => {\r\n  // 로그인 하면 myid 받기\r\n  const currentUserid = 6\r\n  // setCurrentUserId(6);\r\n  // const [chats, setChats] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\r\n  // }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\r\n\r\n  useEffect(() => {\r\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\r\n\r\n    chatSocket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      const { sender, receiver, message } = data;\r\n\r\n      // 새로운 메시지를 상태에 추가\r\n      const newMessage = {\r\n        text: message.text,\r\n        send: false,\r\n        sent_at: message.timestamp,\r\n      };\r\n      setChats(prevMessages => [...prevMessages, newMessage]);\r\n\r\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\r\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          select: 3,\r\n          dm: message.text,\r\n          me: receiver,\r\n          you: sender,\r\n        },\r\n      }).then((response) => {\r\n        console.log('Message saved successfully:', response.data);\r\n        fetchChats(); \r\n        // 필요하다면 추가적인 로직 수행\r\n      }).catch(error => {\r\n        console.error('Error saving message:', error);\r\n      });\r\n    };\r\n\r\n    // 컴포넌트 언마운트 시 소켓 연결 해제\r\n    return () => {\r\n      chatSocket.close();\r\n    };\r\n  }, []);\r\n\r\n\r\n  // const addMessage = (message) => {\r\n  //   setChats(chats.map(chat => {\r\n  //     if (chat.id === selectedChatId) {\r\n  //       return { ...chat, messages: [...chat.messages, message] };\r\n  //     }\r\n  //     return chat;\r\n  //   }));\r\n  // };\r\n\r\n  const fetchChats = () => {\r\n    axios.get('http://127.0.0.1:8000/dm.do', {\r\n      params: {\r\n        curId: currentUserid,\r\n        select: 1,\r\n      }\r\n    }).then(response => {\r\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\r\n      setChats(sortedChats);\r\n    }).catch(error => {\r\n      console.error('Error fetching chats:', error);\r\n    });\r\n  };\r\n  const [chats, setChats] = useState([\r\n    { id: 1, name: 'John Doe', messages: []},\r\n    { id: 2, name: 'Jane Smith', messages: []},\r\n    { id: 3, name: 'John', messages: []},\r\n    { id: 4, name: 'Minji', messages: [] },\r\n  ]);\r\n\r\n\r\n\r\n  const [selectedChatId, setSelectedChatId] = useState(null);\r\n\r\n  const addMessage = (message) => {\r\n    setChats(chats.map(chat => {\r\n      if (chat.id === selectedChatId) {\r\n        return { ...chat, messages: [...chat.messages, message] };\r\n      }\r\n      return chat;\r\n    }));\r\n  };\r\n\r\n  // const addMessage = (message) => {\r\n  //   // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\r\n  //   axios.get(\"http://127.0.0.1:8000\", {\r\n  //     params: {\r\n  //       select: 2,\r\n  //       dm: message.text,\r\n  //       me: currentUserid,\r\n  //       you: selectedChatId,\r\n  //     },\r\n  //   }).then((response) => {\r\n  //     // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n  //     fetchChats();\r\n  //   }).catch(error => {\r\n  //     console.error('Error sending message:', error);\r\n  //   });\r\n  // };\r\n\r\n  const selectChat = (id) => { //  'id': partner_id,\r\n    setSelectedChatId(id);\r\n  };\r\n\r\n\r\n\r\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\r\n\r\n  return (\r\n    <AppContainer>\r\n      <AppBox>\r\n        <ChatList chats={chats} selectChat={selectChat} />\r\n        <ChatSection>\r\n          {selectedChat && (\r\n            <>\r\n              <ChatWindow messages={selectedChat.messages} selectedChatId={selectedChatId} />\r\n              <MessageInput sendMessage={addMessage}\r\n                curUserid={currentUserid}\r\n                receiv_id={selectedChatId} />\r\n            </>\r\n          )}\r\n        </ChatSection>\r\n      </AppBox>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
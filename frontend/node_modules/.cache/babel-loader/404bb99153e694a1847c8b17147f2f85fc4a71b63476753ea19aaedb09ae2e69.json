{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WindowContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n`;\n_c = WindowContainer;\nconst ChatWindow = ({\n  messages,\n  selectedChatId\n}) => {\n  _s();\n  useEffect(() => {\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n    chatSocket.onmessage = function (e) {\n      const data = JSON.parse(e.data);\n      const {\n        sender,\n        receiver,\n        message\n      } = data;\n\n      // 새로운 메시지를 상태에 추가\n      const newMessage = {\n        sender,\n        receiver,\n        text: message.text,\n        timestamp: message.timestamp\n      };\n      setChats(prevMessages => [...prevMessages, newMessage]);\n\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\n        params: {\n          select: 3,\n          dm: message.text,\n          me: receiver,\n          you: sender\n        }\n      }).then(response => {\n        console.log('Message saved successfully:', response.data);\n        // 필요하다면 추가적인 로직 수행\n      }).catch(error => {\n        console.error('Error saving message:', error);\n      });\n    };\n\n    // 컴포넌트 언마운트 시 소켓 연결 해제\n    return () => {\n      chatSocket.close();\n    };\n  }, [selectedChatId]);\n  return /*#__PURE__*/_jsxDEV(WindowContainer, {\n    children: /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2;\n$RefreshReg$(_c, \"WindowContainer\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"names":["React","useEffect","styled","MessageList","jsxDEV","_jsxDEV","WindowContainer","div","_c","ChatWindow","messages","selectedChatId","_s","chatSocket","WebSocket","window","location","host","onmessage","e","data","JSON","parse","sender","receiver","message","newMessage","text","timestamp","setChats","prevMessages","axios","get","params","select","dm","me","you","then","response","console","log","catch","error","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport MessageList from './MessageList';\r\n\r\nconst WindowContainer = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n`;\r\n\r\nconst ChatWindow = ({messages, selectedChatId}) => {\r\n\r\n  useEffect(() => {\r\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\r\n\r\n    chatSocket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      const { sender, receiver, message } = data;\r\n\r\n      // 새로운 메시지를 상태에 추가\r\n      const newMessage = {\r\n        sender,\r\n        receiver,\r\n        text: message.text,\r\n        timestamp: message.timestamp,\r\n      };\r\n      setChats(prevMessages => [...prevMessages, newMessage]);\r\n\r\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\r\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          select: 3,\r\n          dm: message.text,\r\n          me: receiver,\r\n          you: sender,\r\n        },\r\n      }).then((response) => {\r\n        console.log('Message saved successfully:', response.data);\r\n        // 필요하다면 추가적인 로직 수행\r\n      }).catch(error => {\r\n        console.error('Error saving message:', error);\r\n      });\r\n    };\r\n\r\n    // 컴포넌트 언마운트 시 소켓 연결 해제\r\n    return () => {\r\n      chatSocket.close();\r\n    };\r\n  }, [selectedChatId]);\r\n\r\n  return (\r\n    <WindowContainer>\r\n      <MessageList messages={messages} />\r\n    </WindowContainer>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGJ,MAAM,CAACK,GAAG;AAClC;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,eAAe;AAMrB,MAAMG,UAAU,GAAGA,CAAC;EAACC,QAAQ;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAEjDX,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,IAAIC,SAAS,CAAC,QAAQC,MAAM,CAACC,QAAQ,CAACC,IAAI,YAAYN,cAAc,GAAG,CAAC;IAE3FE,UAAU,CAACK,SAAS,GAAG,UAAUC,CAAC,EAAE;MAClC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAACC,IAAI,CAAC;MAC/B,MAAM;QAAEG,MAAM;QAAEC,QAAQ;QAAEC;MAAQ,CAAC,GAAGL,IAAI;;MAE1C;MACA,MAAMM,UAAU,GAAG;QACjBH,MAAM;QACNC,QAAQ;QACRG,IAAI,EAAEF,OAAO,CAACE,IAAI;QAClBC,SAAS,EAAEH,OAAO,CAACG;MACrB,CAAC;MACDC,QAAQ,CAACC,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEJ,UAAU,CAAC,CAAC;;MAEvD;MACAK,KAAK,CAACC,GAAG,CAAC,6BAA6B,EAAE;QACvCC,MAAM,EAAE;UACNC,MAAM,EAAE,CAAC;UACTC,EAAE,EAAEV,OAAO,CAACE,IAAI;UAChBS,EAAE,EAAEZ,QAAQ;UACZa,GAAG,EAAEd;QACP;MACF,CAAC,CAAC,CAACe,IAAI,CAAEC,QAAQ,IAAK;QACpBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAACnB,IAAI,CAAC;QACzD;MACF,CAAC,CAAC,CAACsB,KAAK,CAACC,KAAK,IAAI;QAChBH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,OAAO,MAAM;MACX9B,UAAU,CAAC+B,KAAK,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACjC,cAAc,CAAC,CAAC;EAEpB,oBACEN,OAAA,CAACC,eAAe;IAAAuC,QAAA,eACdxC,OAAA,CAACF,WAAW;MAACO,QAAQ,EAAEA;IAAS;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEtB,CAAC;AAACrC,EAAA,CA7CIH,UAAU;AAAAyC,GAAA,GAAVzC,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAAD,EAAA,EAAA0C,GAAA;AAAAC,YAAA,CAAA3C,EAAA;AAAA2C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n_c = AppContainer;\nconst AppBox = styled.div`\n  width: 900px;\n  height: 600px;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n_c2 = AppBox;\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n_c3 = ChatSection;\nconst BackButton = styled.button`\n  align-self: flex-start;\n  margin-top: 10px;\n  margin-left: 10px;\n  padding: 5px 10px;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\n_c4 = BackButton;\nconst App = () => {\n  _s();\n  // 로그인 하면 myid 받기\n  const currentUserid = 6;\n  // setCurrentUserId(6);\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    fetchChats(); // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  }, [currentUserid]); // currentUserid가 변경될 때마다 useEffect 호출\n\n  const fetchChats = () => {\n    axios.get('http://127.0.0.1:8000/', {\n      params: {\n        curId: currentUserid,\n        select: 1\n      }\n    }).then(response => {\n      setChats(response.data);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  };\n  // const [chats, setChats] = useState([\n  //   { id: 1, name: 'John Doe', messages: [], \"createdat\":createdat },\n  //   { id: 2, name: 'Jane Smith', messages: [], \"createdat\":createdat },\n  //   { id: 3, name: 'John', messages: [], \"createdat\":createdat },\n  //   { id: 4, name: 'Minji', messages: [], \"createdat\":createdat },\n  // ]);\n\n  const [selectedChatId, setSelectedChatId] = useState(null);\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  const addMessage = message => {\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n    axios.get(\"http://127.0.0.1:8000\", {\n      params: {\n        select: 2,\n        dm: message.text,\n        me: currentUserid,\n        you: selectedChatId\n      }\n    }).then(response => {\n      // 메시지 전송 후 채팅 목록을 다시 가져옴\n      fetchChats();\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n  const selectChat = id => {\n    //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n  const handleBackButtonClick = () => {\n    setSelectedChatId(null); // 선택된 채팅 초기화\n  };\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {\n      onClick: handleBackButtonClick,\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBox, {\n      children: [/*#__PURE__*/_jsxDEV(ChatList, {\n        chats: chats,\n        selectChat: selectChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n        children: selectedChat && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: selectedChat.messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            addMessage: addMessage,\n            curUserid: currentUserid,\n            receiv_id: selectedChatId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eVYjbCVyvkEor18KjYpyMayB+p4=\");\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"AppBox\");\n$RefreshReg$(_c3, \"ChatSection\");\n$RefreshReg$(_c4, \"BackButton\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatWindow","MessageInput","ChatList","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","_c","AppBox","_c2","ChatSection","_c3","BackButton","button","_c4","App","_s","currentUserid","chats","setChats","fetchChats","get","params","curId","select","then","response","data","catch","error","console","selectedChatId","setSelectedChatId","addMessage","message","dm","text","me","you","selectChat","id","handleBackButtonClick","selectedChat","find","chat","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","messages","curUserid","receiv_id","_c5","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport axios from \"axios\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n\nconst AppBox = styled.div`\n  width: 900px;\n  height: 600px;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n\nconst BackButton = styled.button`\n  align-self: flex-start;\n  margin-top: 10px;\n  margin-left: 10px;\n  padding: 5px 10px;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\nconst App = () => {\n  // 로그인 하면 myid 받기\n  const currentUserid = 6\n  // setCurrentUserId(6);\n  const [chats, setChats] = useState([]);\n\n  useEffect(() => {\n    fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\n\n  const fetchChats = () => {\n    axios.get('http://127.0.0.1:8000/', {\n      params: {\n        curId: currentUserid,\n        select: 1,\n      }\n    }).then(response => {\n      setChats(response.data);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  };\n  // const [chats, setChats] = useState([\n  //   { id: 1, name: 'John Doe', messages: [], \"createdat\":createdat },\n  //   { id: 2, name: 'Jane Smith', messages: [], \"createdat\":createdat },\n  //   { id: 3, name: 'John', messages: [], \"createdat\":createdat },\n  //   { id: 4, name: 'Minji', messages: [], \"createdat\":createdat },\n  // ]);\n\n\n\n  const [selectedChatId, setSelectedChatId] = useState(null);\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  const addMessage = (message) => {\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n    axios.get(\"http://127.0.0.1:8000\", {\n      params: {\n        select: 2,\n        dm: message.text,\n        me: currentUserid,\n        you: selectedChatId,\n      },\n    }).then((response) => {\n      // 메시지 전송 후 채팅 목록을 다시 가져옴\n      fetchChats();\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n\n  const selectChat = (id) => { //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n\n  const handleBackButtonClick = () => {\n    setSelectedChatId(null); // 선택된 채팅 초기화\n  };\n\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n\n  return (\n    <AppContainer>\n      <BackButton onClick={handleBackButtonClick}>←</BackButton>\n      <AppBox>\n        <ChatList chats={chats} selectChat={selectChat} />\n        <ChatSection>\n          {selectedChat && (\n            <>\n              <ChatWindow messages={selectedChat.messages} />\n              <MessageInput addMessage={addMessage}\n                curUserid={currentUserid}\n                receiv_id={selectedChatId} />\n            </>\n          )}\n        </ChatSection>\n      </AppBox>\n    </AppContainer>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
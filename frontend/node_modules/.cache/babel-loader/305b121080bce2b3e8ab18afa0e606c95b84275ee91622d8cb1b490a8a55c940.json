{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\components\\\\MessageList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\n// 메시지 컨테이너 스타일 정의\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n   flex-direction: column;\n`;\n\n// 메시지 아이템 스타일 정의\n_c = MessageContainer;\nconst MessageItem = styled.div`\n  background-color: #efefef;\n  margin: 5px 0;\n  padding: 10px;\n  border-radius: 10px;\n  align-self: ${props => props.$isUser ? 'flex-end' : 'flex-start'};\n  background-color: ${props => props.$isUser ? '#dcf8c6' : '#fff'};\n  border: 1px solid #dbdbdb;\n`;\n\n// 메시지 리스트 컴포넌트\n_c2 = MessageItem;\nconst MessageList = ({\n  messages = [],\n  selectedChatId\n}) => {\n  _s();\n  const messagesEndRef = useRef(null);\n  // messages 배열이 업데이트 될 때마다 스크롤을 최하단으로 이동\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n    chatSocket.onmessage = function (e) {\n      const data = JSON.parse(e.data);\n      const {\n        sender,\n        receiver,\n        message\n      } = data;\n\n      // 새로운 메시지를 상태에 추가\n      const newMessage = {\n        sender,\n        receiver,\n        text: message.text,\n        timestamp: message.timestamp\n      };\n      setChats(prevMessages => [...prevMessages, newMessage]);\n\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\n        params: {\n          select: 3,\n          dm: message.text,\n          me: receiver,\n          you: sender\n        }\n      }).then(response => {\n        console.log('Message saved successfully:', response.data);\n        // 필요하다면 추가적인 로직 수행\n      }).catch(error => {\n        console.error('Error saving message:', error);\n      });\n    };\n\n    // 컴포넌트 언마운트 시 소켓 연결 해제\n    return () => {\n      chatSocket.close();\n    };\n  }, [selectedChatId]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContainer, {\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(MessageItem, {\n      $isUser: message.send,\n      children: message.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"/sWXiMwCWRKxInWxFmGxHrgNybk=\");\n_c3 = MessageList;\nexport default MessageList;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageContainer\");\n$RefreshReg$(_c2, \"MessageItem\");\n$RefreshReg$(_c3, \"MessageList\");","map":{"version":3,"names":["React","useRef","useEffect","styled","jsxDEV","_jsxDEV","MessageContainer","div","_c","MessageItem","props","$isUser","_c2","MessageList","messages","selectedChatId","_s","messagesEndRef","scrollToBottom","chatSocket","WebSocket","window","location","host","onmessage","e","data","JSON","parse","sender","receiver","message","newMessage","text","timestamp","setChats","prevMessages","axios","get","params","select","dm","me","you","then","response","console","log","catch","error","close","_messagesEndRef$curre","current","scrollIntoView","behavior","children","map","index","send","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/components/MessageList.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// 메시지 컨테이너 스타일 정의\r\nconst MessageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n   flex-direction: column;\r\n`;\r\n\r\n// 메시지 아이템 스타일 정의\r\nconst MessageItem = styled.div`\r\n  background-color: #efefef;\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  align-self: ${props => (props.$isUser ? 'flex-end' : 'flex-start')};\r\n  background-color: ${props => (props.$isUser ? '#dcf8c6' : '#fff')};\r\n  border: 1px solid #dbdbdb;\r\n`;\r\n\r\n// 메시지 리스트 컴포넌트\r\nconst MessageList = ({ messages = [], selectedChatId }) => {\r\n  const messagesEndRef = useRef(null);\r\n  // messages 배열이 업데이트 될 때마다 스크롤을 최하단으로 이동\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n  \r\n  useEffect(() => {\r\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\r\n\r\n    chatSocket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      const { sender, receiver, message } = data;\r\n\r\n      // 새로운 메시지를 상태에 추가\r\n      const newMessage = {\r\n        sender,\r\n        receiver,\r\n        text: message.text,\r\n        timestamp: message.timestamp,\r\n      };\r\n      setChats(prevMessages => [...prevMessages, newMessage]);\r\n\r\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\r\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          select: 3,\r\n          dm: message.text,\r\n          me: receiver,\r\n          you: sender,\r\n        },\r\n      }).then((response) => {\r\n        console.log('Message saved successfully:', response.data);\r\n        // 필요하다면 추가적인 로직 수행\r\n      }).catch(error => {\r\n        console.error('Error saving message:', error);\r\n      });\r\n    };\r\n\r\n    // 컴포넌트 언마운트 시 소켓 연결 해제\r\n    return () => {\r\n      chatSocket.close();\r\n    };\r\n  }, [selectedChatId]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  return (\r\n    <MessageContainer>\r\n      {messages.map((message, index) => (\r\n        <MessageItem key={index} $isUser={message.send}>\r\n          {message.text}\r\n        </MessageItem>\r\n      ))}\r\n      <div ref={messagesEndRef} />\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nexport default MessageList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
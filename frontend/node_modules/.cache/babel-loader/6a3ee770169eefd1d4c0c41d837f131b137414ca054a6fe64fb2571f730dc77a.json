{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Mtest/workdjango/instagram/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import React,{useState,useEffect}from\"react\";import styled from\"styled-components\";import ChatWindow from\"./components//ChatWindow\";import MessageInput from\"./components/MessageInput\";import ChatList from\"./components/ChatList\";import axios from\"axios\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const AppContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100vh;\\n  background-color: #fafafa;\\n\"])));const AppBox=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid #dbdbdb;\\n  border-radius: 10px;\\n  background-color: black;\\n  display: flex;\\n  flex-direction: row;\\n\"])));const ChatSection=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  flex: 2;\\n\"])));const DirectMessages=()=>{const currentUserid=6;const[chats,setChats]=useState([]);const[selectedChatId,setSelectedChatId]=useState(null);useEffect(()=>{fetchChats();// 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n},[currentUserid]);// currentUserid가 변경될 때마다 useEffect 호출\nuseEffect(()=>{const chatSocket=new WebSocket(\"ws://\".concat(window.location.host,\"/ws/chat/\").concat(selectedChatId,\"/\"));chatSocket.onmessage=function(e){const data=JSON.parse(e.data);const{sender,receiver,message}=data;// 새로운 메시지를 상태에 추가\nconst newMessage={text:message.text,send:false,sent_at:message.timestamp};setChats(prevMessages=>[...prevMessages,newMessage]);// 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\naxios.get(\"http://127.0.0.1:8000/dm.do\",{params:{select:3,dm:message.text,me:receiver,you:sender}}).then(response=>{console.log(\"Message saved successfully:\",response.data);fetchChats();// 필요하다면 추가적인 로직 수행\n}).catch(error=>{console.error(\"Error saving message:\",error);});};// 컴포넌트 언마운트 시 소켓 연결 해제\nreturn()=>{chatSocket.close();};},[]);const fetchChats=()=>{axios.get(\"http://127.0.0.1:8000/dm.do\",{params:{curId:currentUserid,select:1}}).then(response=>{const sortedChats=response.data.sort((a,b)=>new Date(b.createdat)-new Date(a.createdat));setChats(sortedChats);}).catch(error=>{console.error(\"Error fetching chats:\",error);});};const sendMessage=message=>{// 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\naxios.get(\"http://127.0.0.1:8000/dm.do\",{params:{select:2,dm:message.text,me:currentUserid,you:selectedChatId}}).then(response=>{// 메시지 전송 후 채팅 목록을 다시 가져옴\nfetchChats();}).catch(error=>{console.error(\"Error sending message:\",error);});};// const receiveMessage = () => {\n//   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n//   chatSocket.onmessage = function (e) {\n//     const data = JSON.parse(e.data);\n//     // 받은 메시지 처리 로직 (예시: 채팅 목록을 다시 가져오는 것처럼)\n//     const { sender, receiver, message } = data;\n//     axios.get(\"http://127.0.0.1:8000/dm.do\", {\n//       params: {\n//         select: 3,\n//         dm: message.text,\n//         me: receiver,\n//         you: sender,\n//       },\n//     }).then((response) => {\n//       // 메시지 전송 후 채팅 목록을 다시 가져옴\n//       fetchChats();\n//     }).catch(error => {\n//       console.error('Error sending message:', error);\n//     });\n//   };\n//   chatSocket.onclose = function (e) {\n//     console.error('Chat socket closed unexpectedly');\n//   };\n//   return () => {\n//     chatSocket.close();\n//   };\n// };\nconst selectChat=id=>{//  'id': partner_id,\nsetSelectedChatId(id);};const selectedChat=chats.find(chat=>chat.id===selectedChatId);return/*#__PURE__*/_jsx(AppContainer,{children:/*#__PURE__*/_jsxs(AppBox,{children:[/*#__PURE__*/_jsx(ChatList,{chats:chats,selectChat:selectChat}),/*#__PURE__*/_jsx(ChatSection,{children:selectedChat&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ChatWindow,{messages:selectedChat.messages,selectedChatId:selectedChatId}),/*#__PURE__*/_jsx(MessageInput,{sendMessage:sendMessage,curUserid:currentUserid,receiv_id:selectedChatId})]})})]})});};export default DirectMessages;","map":{"version":3,"names":["React","useState","useEffect","styled","ChatWindow","MessageInput","ChatList","axios","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","AppContainer","div","_templateObject","_taggedTemplateLiteral","AppBox","_templateObject2","ChatSection","_templateObject3","DirectMessages","currentUserid","chats","setChats","selectedChatId","setSelectedChatId","fetchChats","chatSocket","WebSocket","concat","window","location","host","onmessage","e","data","JSON","parse","sender","receiver","message","newMessage","text","send","sent_at","timestamp","prevMessages","get","params","select","dm","me","you","then","response","console","log","catch","error","close","curId","sortedChats","sort","a","b","Date","createdat","sendMessage","selectChat","id","selectedChat","find","chat","children","messages","curUserid","receiv_id"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/DM/DirectMessages.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ChatWindow from \"./components//ChatWindow\";\r\nimport MessageInput from \"./components/MessageInput\";\r\nimport ChatList from \"./components/ChatList\";\r\nimport axios from \"axios\";\r\nconst AppContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #fafafa;\r\n`;\r\n\r\nconst AppBox = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 10px;\r\n  background-color: black;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 2;\r\n`;\r\n\r\nconst DirectMessages = () => {\r\n  const currentUserid = 6;\r\n  const [chats, setChats] = useState([]);\r\n  const [selectedChatId, setSelectedChatId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchChats(); // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\r\n  }, [currentUserid]); // currentUserid가 변경될 때마다 useEffect 호출\r\n\r\n  useEffect(() => {\r\n    const chatSocket = new WebSocket(\r\n      `ws://${window.location.host}/ws/chat/${selectedChatId}/`\r\n    );\r\n\r\n    chatSocket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      const { sender, receiver, message } = data;\r\n\r\n      // 새로운 메시지를 상태에 추가\r\n      const newMessage = {\r\n        text: message.text,\r\n        send: false,\r\n        sent_at: message.timestamp,\r\n      };\r\n      setChats((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\r\n      axios\r\n        .get(\"http://127.0.0.1:8000/dm.do\", {\r\n          params: {\r\n            select: 3,\r\n            dm: message.text,\r\n            me: receiver,\r\n            you: sender,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          console.log(\"Message saved successfully:\", response.data);\r\n          fetchChats();\r\n          // 필요하다면 추가적인 로직 수행\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error saving message:\", error);\r\n        });\r\n    };\r\n    // 컴포넌트 언마운트 시 소켓 연결 해제\r\n    return () => {\r\n      chatSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  const fetchChats = () => {\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          curId: currentUserid,\r\n          select: 1,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const sortedChats = response.data.sort(\r\n          (a, b) => new Date(b.createdat) - new Date(a.createdat)\r\n        );\r\n        setChats(sortedChats);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching chats:\", error);\r\n      });\r\n  };\r\n\r\n  const sendMessage = (message) => {\r\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          select: 2,\r\n          dm: message.text,\r\n          me: currentUserid,\r\n          you: selectedChatId,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n        fetchChats();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error sending message:\", error);\r\n      });\r\n  };\r\n\r\n  // const receiveMessage = () => {\r\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\r\n\r\n  //   chatSocket.onmessage = function (e) {\r\n  //     const data = JSON.parse(e.data);\r\n  //     // 받은 메시지 처리 로직 (예시: 채팅 목록을 다시 가져오는 것처럼)\r\n  //     const { sender, receiver, message } = data;\r\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\r\n  //       params: {\r\n  //         select: 3,\r\n  //         dm: message.text,\r\n  //         me: receiver,\r\n  //         you: sender,\r\n  //       },\r\n  //     }).then((response) => {\r\n  //       // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n  //       fetchChats();\r\n  //     }).catch(error => {\r\n  //       console.error('Error sending message:', error);\r\n  //     });\r\n  //   };\r\n\r\n  //   chatSocket.onclose = function (e) {\r\n  //     console.error('Chat socket closed unexpectedly');\r\n  //   };\r\n\r\n  //   return () => {\r\n  //     chatSocket.close();\r\n  //   };\r\n\r\n  // };\r\n\r\n  const selectChat = (id) => {\r\n    //  'id': partner_id,\r\n    setSelectedChatId(id);\r\n  };\r\n\r\n  const selectedChat = chats.find((chat) => chat.id === selectedChatId);\r\n\r\n  return (\r\n    <AppContainer>\r\n      <AppBox>\r\n        <ChatList chats={chats} selectChat={selectChat} />\r\n        <ChatSection>\r\n          {selectedChat && (\r\n            <>\r\n              <ChatWindow\r\n                messages={selectedChat.messages}\r\n                selectedChatId={selectedChatId}\r\n              />\r\n              <MessageInput\r\n                sendMessage={sendMessage}\r\n                curUserid={currentUserid}\r\n                receiv_id={selectedChatId}\r\n              />\r\n            </>\r\n          )}\r\n        </ChatSection>\r\n      </AppBox>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default DirectMessages;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
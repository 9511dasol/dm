{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\DM\\\\DirectMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport ChatWindow from \"./components//ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport ChatList from \"./components/ChatList\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\nconst AppBox = styled.div`\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: black;\n  display: flex;\n  flex-direction: row;\n`;\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\nconst DirectMessages = () => {\n  _s();\n  const currentUserid = 6;\n  // const [chats, setChats] = useState([]);\n  const [chats, setChats] = useState([{\n    id: 1,\n    name: 'John Doe',\n    messages: []\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    messages: []\n  }, {\n    id: 3,\n    name: 'John',\n    messages: []\n  }, {\n    id: 4,\n    name: 'Minji',\n    messages: []\n  }]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  useEffect(() => {\n    fetchChats(); // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  }, [currentUserid]); // currentUserid가 변경될 때마다 useEffect 호출\n\n  useEffect(() => {\n    const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n    chatSocket.onmessage = function (e) {\n      const data = JSON.parse(e.data);\n      const {\n        sender,\n        receiver,\n        message\n      } = data;\n\n      // 새로운 메시지를 상태에 추가\n      const newMessage = {\n        text: message.text,\n        send: false,\n        sent_at: message.timestamp\n      };\n      setChats(prevMessages => [...prevMessages, newMessage]);\n\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n      axios.get(\"http://127.0.0.1:8000/dm.do\", {\n        params: {\n          select: 3,\n          dm: message.text,\n          me: receiver,\n          you: sender\n        }\n      }).then(response => {\n        console.log(\"Message saved successfully:\", response.data);\n        fetchChats();\n        // 필요하다면 추가적인 로직 수행\n      }).catch(error => {\n        console.error(\"Error saving message:\", error);\n      });\n    };\n    // 컴포넌트 언마운트 시 소켓 연결 해제\n    return () => {\n      chatSocket.close();\n    };\n  }, []);\n  const fetchChats = () => {\n    axios.get(\"http://127.0.0.1:8000/dm.do\", {\n      params: {\n        curId: currentUserid,\n        select: 1\n      }\n    }).then(response => {\n      const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\n      setChats(sortedChats);\n    }).catch(error => {\n      console.error(\"Error fetching chats:\", error);\n    });\n  };\n  const sendMessage = message => {\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n    axios.get(\"http://127.0.0.1:8000/dm.do\", {\n      params: {\n        select: 2,\n        dm: message.text,\n        me: currentUserid,\n        you: selectedChatId\n      }\n    }).then(response => {\n      // 메시지 전송 후 채팅 목록을 다시 가져옴\n      fetchChats();\n    }).catch(error => {\n      console.error(\"Error sending message:\", error);\n    });\n  };\n\n  // const receiveMessage = () => {\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n\n  //   chatSocket.onmessage = function (e) {\n  //     const data = JSON.parse(e.data);\n  //     // 받은 메시지 처리 로직 (예시: 채팅 목록을 다시 가져오는 것처럼)\n  //     const { sender, receiver, message } = data;\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\n  //       params: {\n  //         select: 3,\n  //         dm: message.text,\n  //         me: receiver,\n  //         you: sender,\n  //       },\n  //     }).then((response) => {\n  //       // 메시지 전송 후 채팅 목록을 다시 가져옴\n  //       fetchChats();\n  //     }).catch(error => {\n  //       console.error('Error sending message:', error);\n  //     });\n  //   };\n\n  //   chatSocket.onclose = function (e) {\n  //     console.error('Chat socket closed unexpectedly');\n  //   };\n\n  //   return () => {\n  //     chatSocket.close();\n  //   };\n\n  // };\n\n  const selectChat = id => {\n    //  'id': partner_id,\n    setSelectedChatId(id);\n  };\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n  return (\n    /*#__PURE__*/\n    // <AppContainer>\n    //   <AppBox>\n    //     <ChatList chats={chats} selectChat={selectChat} />\n    //     <ChatSection>\n    //       {selectedChat && (\n    //         <>\n    //           <ChatWindow\n    //             messages={selectedChat.messages}\n    //             selectedChatId={selectedChatId}\n    //           />\n    //           <MessageInput\n    //             sendMessage={sendMessage}\n    //             curUserid={currentUserid}\n    //             receiv_id={selectedChatId}\n    //           />\n    //         </>\n    //       )}\n    //     </ChatSection>\n    //   </AppBox>\n    // </AppContainer>\n    _jsxDEV(\"div\", {\n      children: \"dd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(DirectMessages, \"EN0PoH1F7z5Zxj0NmCyFGbmWoS4=\");\n_c = DirectMessages;\nexport default DirectMessages;\nvar _c;\n$RefreshReg$(_c, \"DirectMessages\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatWindow","MessageInput","ChatList","axios","jsxDEV","_jsxDEV","AppContainer","div","AppBox","ChatSection","DirectMessages","_s","currentUserid","chats","setChats","id","name","messages","selectedChatId","setSelectedChatId","fetchChats","chatSocket","WebSocket","window","location","host","onmessage","e","data","JSON","parse","sender","receiver","message","newMessage","text","send","sent_at","timestamp","prevMessages","get","params","select","dm","me","you","then","response","console","log","catch","error","close","curId","sortedChats","sort","a","b","Date","createdat","sendMessage","selectChat","selectedChat","find","chat","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/DM/DirectMessages.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ChatWindow from \"./components//ChatWindow\";\r\nimport MessageInput from \"./components/MessageInput\";\r\nimport ChatList from \"./components/ChatList\";\r\nimport axios from \"axios\";\r\n\r\nconst AppContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #fafafa;\r\n`;\r\n\r\nconst AppBox = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 10px;\r\n  background-color: black;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 2;\r\n`;\r\n\r\nconst DirectMessages = () => {\r\n  const currentUserid = 6;\r\n  // const [chats, setChats] = useState([]);\r\n  const [chats, setChats] = useState([\r\n    { id: 1, name: 'John Doe', messages: [] },\r\n    { id: 2, name: 'Jane Smith', messages: [] },\r\n    { id: 3, name: 'John', messages: [] },\r\n    { id: 4, name: 'Minji', messages: [] },\r\n  ]);\r\n  const [selectedChatId, setSelectedChatId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchChats(); // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\r\n  }, [currentUserid]); // currentUserid가 변경될 때마다 useEffect 호출\r\n\r\n  useEffect(() => {\r\n    const chatSocket = new WebSocket(\r\n      `ws://${window.location.host}/ws/chat/${selectedChatId}/`\r\n    );\r\n\r\n    chatSocket.onmessage = function (e) {\r\n      const data = JSON.parse(e.data);\r\n      const { sender, receiver, message } = data;\r\n\r\n      // 새로운 메시지를 상태에 추가\r\n      const newMessage = {\r\n        text: message.text,\r\n        send: false,\r\n        sent_at: message.timestamp,\r\n      };\r\n      setChats((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n      // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\r\n      axios\r\n        .get(\"http://127.0.0.1:8000/dm.do\", {\r\n          params: {\r\n            select: 3,\r\n            dm: message.text,\r\n            me: receiver,\r\n            you: sender,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          console.log(\"Message saved successfully:\", response.data);\r\n          fetchChats();\r\n          // 필요하다면 추가적인 로직 수행\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error saving message:\", error);\r\n        });\r\n    };\r\n    // 컴포넌트 언마운트 시 소켓 연결 해제\r\n    return () => {\r\n      chatSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  const fetchChats = () => {\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          curId: currentUserid,\r\n          select: 1,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const sortedChats = response.data.sort(\r\n          (a, b) => new Date(b.createdat) - new Date(a.createdat)\r\n        );\r\n        setChats(sortedChats);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching chats:\", error);\r\n      });\r\n  };\r\n\r\n  const sendMessage = (message) => {\r\n    // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/dm.do\", {\r\n        params: {\r\n          select: 2,\r\n          dm: message.text,\r\n          me: currentUserid,\r\n          you: selectedChatId,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n        fetchChats();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error sending message:\", error);\r\n      });\r\n  };\r\n\r\n  // const receiveMessage = () => {\r\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\r\n\r\n  //   chatSocket.onmessage = function (e) {\r\n  //     const data = JSON.parse(e.data);\r\n  //     // 받은 메시지 처리 로직 (예시: 채팅 목록을 다시 가져오는 것처럼)\r\n  //     const { sender, receiver, message } = data;\r\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\r\n  //       params: {\r\n  //         select: 3,\r\n  //         dm: message.text,\r\n  //         me: receiver,\r\n  //         you: sender,\r\n  //       },\r\n  //     }).then((response) => {\r\n  //       // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n  //       fetchChats();\r\n  //     }).catch(error => {\r\n  //       console.error('Error sending message:', error);\r\n  //     });\r\n  //   };\r\n\r\n  //   chatSocket.onclose = function (e) {\r\n  //     console.error('Chat socket closed unexpectedly');\r\n  //   };\r\n\r\n  //   return () => {\r\n  //     chatSocket.close();\r\n  //   };\r\n\r\n  // };\r\n\r\n  const selectChat = (id) => {\r\n    //  'id': partner_id,\r\n    setSelectedChatId(id);\r\n  };\r\n\r\n  const selectedChat = chats.find((chat) => chat.id === selectedChatId);\r\n\r\n  return (\r\n    // <AppContainer>\r\n    //   <AppBox>\r\n    //     <ChatList chats={chats} selectChat={selectChat} />\r\n    //     <ChatSection>\r\n    //       {selectedChat && (\r\n    //         <>\r\n    //           <ChatWindow\r\n    //             messages={selectedChat.messages}\r\n    //             selectedChatId={selectedChatId}\r\n    //           />\r\n    //           <MessageInput\r\n    //             sendMessage={sendMessage}\r\n    //             curUserid={currentUserid}\r\n    //             receiv_id={selectedChatId}\r\n    //           />\r\n    //         </>\r\n    //       )}\r\n    //     </ChatSection>\r\n    //   </AppBox>\r\n    // </AppContainer>\r\n    <div>dd</div>\r\n  );\r\n};\r\n\r\nexport default DirectMessages;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
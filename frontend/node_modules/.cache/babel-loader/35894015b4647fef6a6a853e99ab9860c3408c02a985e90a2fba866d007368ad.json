{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n_c = AppContainer;\nconst AppBox = styled.div`\n  width: 900px;\n  height: 600px;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n_c2 = AppBox;\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\n_c3 = ChatSection;\nconst App = () => {\n  _s();\n  // 로그인 하면 myid 받기\n  const [currentUserid, setCurrentUserId] = useState(null);\n  // const [chats, setChats] = useState([]);\n\n  // useEffect(() => {\n  //   // Axios를 사용해 백앤드의 API 엔드포인트로 요청을 보냄\n  //   axios.get('http://127.0.0.1:8000/', {\n  //     params: {\n  //       curId: currentUserid,\n  //       select: 1,\n  //     }\n  //   }).then(response => {\n  //     // 백앤드에서 받은 데이터를 chats 상태로 설정\n  //     setChats(response.data);\n  //   }).catch(error => {\n  //     console.error('Error fetching chats:', error);\n  //   });\n  // }, [currentUserid]);\n  const [chats, setChats] = useState([{\n    id: 1,\n    name: 'John Doe',\n    messages: []\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    messages: []\n  }, {\n    id: 3,\n    name: 'John',\n    messages: []\n  }, {\n    id: 4,\n    name: 'Minji',\n    messages: []\n  }]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const addMessage = message => {\n    setChats(chats.map(chat => {\n      if (chat.id === selectedChatId) {\n        return {\n          ...chat,\n          messages: [...chat.messages, message]\n        };\n      }\n      return chat;\n    }));\n  };\n  const selectChat = id => {\n    setSelectedChatId(id);\n  };\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(AppBox, {\n      children: [/*#__PURE__*/_jsxDEV(ChatList, {\n        chats: chats,\n        selectChat: selectChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n        children: selectedChat && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: selectedChat.messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            addMessage: addMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5HGJbahOiETHugJVEgkLA7dq0fI=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"AppBox\");\n$RefreshReg$(_c3, \"ChatSection\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatWindow","MessageInput","ChatList","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","_c","AppBox","_c2","ChatSection","_c3","App","_s","currentUserid","setCurrentUserId","chats","setChats","id","name","messages","selectedChatId","setSelectedChatId","addMessage","message","map","chat","selectChat","selectedChat","find","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatWindow from './components//ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport ChatList from './components/ChatList';\nimport axios from \"axios\";\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #fafafa;\n`;\n\nconst AppBox = styled.div`\n  width: 900px;\n  height: 600px;\n  border: 1px solid #dbdbdb;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ChatSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 2;\n`;\n// function a(myId) {\n\n//   axios\n//     .get(\"http://127.0.0.1:8000\", {\n//       params: {\n//         select: 1,\n//         myid: myId,\n//       },\n//     })\n//     .then((response) => {\n//       return response.data;\n//     }).catch(error => {\n//       console.error('Error fetching chats:', error);\n//     });\n// }\nconst App = () => {\n  // 로그인 하면 myid 받기\n  const [currentUserid, setCurrentUserId] = useState(null)\n  // const [chats, setChats] = useState([]);\n\n  // useEffect(() => {\n  //   // Axios를 사용해 백앤드의 API 엔드포인트로 요청을 보냄\n  //   axios.get('http://127.0.0.1:8000/', {\n  //     params: {\n  //       curId: currentUserid,\n  //       select: 1,\n  //     }\n  //   }).then(response => {\n  //     // 백앤드에서 받은 데이터를 chats 상태로 설정\n  //     setChats(response.data);\n  //   }).catch(error => {\n  //     console.error('Error fetching chats:', error);\n  //   });\n  // }, [currentUserid]);\n  const [chats, setChats] = useState([\n    { id: 1, name: 'John Doe', messages: [] },\n    { id: 2, name: 'Jane Smith', messages: [] },\n    { id: 3, name: 'John', messages: [] },\n    { id: 4, name: 'Minji', messages: [] },\n  ]);\n\n\n\n  const [selectedChatId, setSelectedChatId] = useState(null);\n\n  const addMessage = (message) => {\n    setChats(chats.map(chat => {\n      if (chat.id === selectedChatId) {\n        return { ...chat, messages: [...chat.messages, message] };\n      }\n      return chat;\n    }));\n  };\n\n  const selectChat = (id) => {\n    setSelectedChatId(id);\n  };\n\n  const selectedChat = chats.find(chat => chat.id === selectedChatId);\n\n  return (\n    <AppContainer>\n      <AppBox>\n        <ChatList chats={chats} selectChat={selectChat} />\n        <ChatSection>\n          {selectedChat && (\n            <>\n              <ChatWindow messages={selectedChat.messages} />\n              <MessageInput addMessage={addMessage} />\n            </>\n          )}\n        </ChatSection>\n      </AppBox>\n    </AppContainer>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
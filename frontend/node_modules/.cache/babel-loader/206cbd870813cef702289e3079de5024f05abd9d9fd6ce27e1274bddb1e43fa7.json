{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mtest\\\\workdjango\\\\instagram\\\\frontend\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Timeline from \"./timeline/Timeline\";\nimport Homepage from \"./Homepage\";\nimport DirectMessages from \"./DM/DirectMessages\";\n// import Homepage from \"./Homepage\";\n// import Timeline from \"./timeline/Timeline\"; // 새롭게 추가할 컴포넌트\n// import DirectMessages from \"./DM/DirectMessages\"\nimport \"./App.css\";\n\n// import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // 로그인 하면 myid 받기\n  // const currentUserid = 6\n  // setCurrentUserId(6);\n  // const [chats, setChats] = useState([]);\n\n  // useEffect(() => {\n  //   fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\n  // }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\n\n  // useEffect(() => {\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\n\n  //   chatSocket.onmessage = function (e) {\n  //     const data = JSON.parse(e.data);\n  //     const { sender, receiver, message } = data;\n\n  //     // 새로운 메시지를 상태에 추가\n  //     const newMessage = {\n  //       text: message.text,\n  //       send: false,\n  //       sent_at: message.timestamp,\n  //     };\n  //     setChats(prevMessages => [...prevMessages, newMessage]);\n\n  //     // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\n  //       params: {\n  //         select: 3,\n  //         dm: message.text,\n  //         me: receiver,\n  //         you: sender,\n  //       },\n  //     }).then((response) => {\n  //       console.log('Message saved successfully:', response.data);\n  //       fetchChats();\n  //       // 필요하다면 추가적인 로직 수행\n  //     }).catch(error => {\n  //       console.error('Error saving message:', error);\n  //     });\n  //   };\n\n  // 컴포넌트 언마운트 시 소켓 연결 해제\n  //   return () => {\n  //     chatSocket.close();\n  //   };\n  // }, []);\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  // const fetchChats = () => {\n  //   axios.get('http://127.0.0.1:8000/dm.do', {\n  //     params: {\n  //       curId: currentUserid,\n  //       select: 1,\n  //     }\n  //   }).then(response => {\n  //     const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\n  //     setChats(sortedChats);\n  //   }).catch(error => {\n  //     console.error('Error fetching chats:', error);\n  //   });\n  // };\n  // const [chats, setChats] = useState([\n  //   { id: 1, name: 'John Doe', messages: [] },\n  //   { id: 2, name: 'Jane Smith', messages: [] },\n  //   { id: 3, name: 'John', messages: [] },\n  //   { id: 4, name: 'Minji', messages: [] },\n  // ]);\n\n  // const [selectedChatId, setSelectedChatId] = useState(null);\n\n  // const addMessage = (message) => {\n  //   setChats(chats.map(chat => {\n  //     if (chat.id === selectedChatId) {\n  //       return { ...chat, messages: [...chat.messages, message] };\n  //     }\n  //     return chat;\n  //   }));\n  // };\n\n  // const addMessage = (message) => {\n  //   // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\n  //   axios.get(\"http://127.0.0.1:8000\", {\n  //     params: {\n  //       select: 2,\n  //       dm: message.text,\n  //       me: currentUserid,\n  //       you: selectedChatId,\n  //     },\n  //   }).then((response) => {\n  //     // 메시지 전송 후 채팅 목록을 다시 가져옴\n  //     fetchChats();\n  //   }).catch(error => {\n  //     console.error('Error sending message:', error);\n  //   });\n  // };\n\n  // const selectChat = (id) => { //  'id': partner_id,\n  //   setSelectedChatId(id);\n  // };\n\n  // const selectedChat = chats.find(chat => chat.id === selectedChatId);\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 34\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          index: true,\n          element: /*#__PURE__*/_jsxDEV(Timeline, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/timeline\",\n          element: /*#__PURE__*/_jsxDEV(Timeline, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/d\",\n          element: /*#__PURE__*/_jsxDEV(DirectMessages, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Timeline","Homepage","DirectMessages","jsxDEV","_jsxDEV","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/Mtest/workdjango/instagram/frontend/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport Timeline from \"./timeline/Timeline\";\r\nimport Homepage from \"./Homepage\";\r\nimport DirectMessages from \"./DM/DirectMessages\"\r\n// import Homepage from \"./Homepage\";\r\n// import Timeline from \"./timeline/Timeline\"; // 새롭게 추가할 컴포넌트\r\n// import DirectMessages from \"./DM/DirectMessages\"\r\nimport \"./App.css\";\r\n\r\n// import { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nconst App = () => {\r\n  // 로그인 하면 myid 받기\r\n  // const currentUserid = 6\r\n  // setCurrentUserId(6);\r\n  // const [chats, setChats] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   fetchChats();  // 컴포넌트가 처음 마운트될 때 채팅 목록을 가져오는 함수 호출\r\n  // }, [currentUserid]);  // currentUserid가 변경될 때마다 useEffect 호출\r\n\r\n  // useEffect(() => {\r\n  //   const chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/${selectedChatId}/`);\r\n\r\n  //   chatSocket.onmessage = function (e) {\r\n  //     const data = JSON.parse(e.data);\r\n  //     const { sender, receiver, message } = data;\r\n\r\n  //     // 새로운 메시지를 상태에 추가\r\n  //     const newMessage = {\r\n  //       text: message.text,\r\n  //       send: false,\r\n  //       sent_at: message.timestamp,\r\n  //     };\r\n  //     setChats(prevMessages => [...prevMessages, newMessage]);\r\n\r\n  //     // 메시지를 수신하면 해당 메시지를 서버에 저장하고, 채팅 목록을 다시 가져오는 예시\r\n  //     axios.get(\"http://127.0.0.1:8000/dm.do\", {\r\n  //       params: {\r\n  //         select: 3,\r\n  //         dm: message.text,\r\n  //         me: receiver,\r\n  //         you: sender,\r\n  //       },\r\n  //     }).then((response) => {\r\n  //       console.log('Message saved successfully:', response.data);\r\n  //       fetchChats();\r\n  //       // 필요하다면 추가적인 로직 수행\r\n  //     }).catch(error => {\r\n  //       console.error('Error saving message:', error);\r\n  //     });\r\n  //   };\r\n\r\n    // 컴포넌트 언마운트 시 소켓 연결 해제\r\n  //   return () => {\r\n  //     chatSocket.close();\r\n  //   };\r\n  // }, []);\r\n\r\n\r\n  // const addMessage = (message) => {\r\n  //   setChats(chats.map(chat => {\r\n  //     if (chat.id === selectedChatId) {\r\n  //       return { ...chat, messages: [...chat.messages, message] };\r\n  //     }\r\n  //     return chat;\r\n  //   }));\r\n  // };\r\n\r\n  // const fetchChats = () => {\r\n  //   axios.get('http://127.0.0.1:8000/dm.do', {\r\n  //     params: {\r\n  //       curId: currentUserid,\r\n  //       select: 1,\r\n  //     }\r\n  //   }).then(response => {\r\n  //     const sortedChats = response.data.sort((a, b) => new Date(b.createdat) - new Date(a.createdat));\r\n  //     setChats(sortedChats);\r\n  //   }).catch(error => {\r\n  //     console.error('Error fetching chats:', error);\r\n  //   });\r\n  // };\r\n  // const [chats, setChats] = useState([\r\n  //   { id: 1, name: 'John Doe', messages: [] },\r\n  //   { id: 2, name: 'Jane Smith', messages: [] },\r\n  //   { id: 3, name: 'John', messages: [] },\r\n  //   { id: 4, name: 'Minji', messages: [] },\r\n  // ]);\r\n\r\n\r\n\r\n  // const [selectedChatId, setSelectedChatId] = useState(null);\r\n\r\n  // const addMessage = (message) => {\r\n  //   setChats(chats.map(chat => {\r\n  //     if (chat.id === selectedChatId) {\r\n  //       return { ...chat, messages: [...chat.messages, message] };\r\n  //     }\r\n  //     return chat;\r\n  //   }));\r\n  // };\r\n\r\n  // const addMessage = (message) => {\r\n  //   // 메시지를 보내는 함수 (예: handleSend 함수 내부와 동일)\r\n  //   axios.get(\"http://127.0.0.1:8000\", {\r\n  //     params: {\r\n  //       select: 2,\r\n  //       dm: message.text,\r\n  //       me: currentUserid,\r\n  //       you: selectedChatId,\r\n  //     },\r\n  //   }).then((response) => {\r\n  //     // 메시지 전송 후 채팅 목록을 다시 가져옴\r\n  //     fetchChats();\r\n  //   }).catch(error => {\r\n  //     console.error('Error sending message:', error);\r\n  //   });\r\n  // };\r\n\r\n  // const selectChat = (id) => { //  'id': partner_id,\r\n  //   setSelectedChatId(id);\r\n  // };\r\n\r\n\r\n\r\n  // const selectedChat = chats.find(chat => chat.id === selectedChatId);\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Homepage />}>\r\n          <Route index element={<Timeline />} />\r\n          <Route path=\"/timeline\" element={<Timeline />} />\r\n          <Route path=\"/d\" element={<DirectMessages />} />\r\n        </Route>\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,cAAc,MAAM,qBAAqB;AAChD;AACA;AACA;AACA,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE;EACF;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAIA;;EAEA,oBACED,OAAA,CAACP,MAAM;IAAAS,QAAA,eACLF,OAAA,CAACN,MAAM;MAAAQ,QAAA,eACLF,OAAA,CAACL,KAAK;QAACQ,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEJ,OAAA,CAACH,QAAQ;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QAAAN,QAAA,gBACpCF,OAAA,CAACL,KAAK;UAACc,KAAK;UAACL,OAAO,eAAEJ,OAAA,CAACJ,QAAQ;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACtCR,OAAA,CAACL,KAAK;UAACQ,IAAI,EAAC,WAAW;UAACC,OAAO,eAAEJ,OAAA,CAACJ,QAAQ;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjDR,OAAA,CAACL,KAAK;UAACQ,IAAI,EAAC,IAAI;UAACC,OAAO,eAAEJ,OAAA,CAACF,cAAc;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACE,EAAA,GA/HIT,GAAG;AAiIT,eAAeA,GAAG;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}